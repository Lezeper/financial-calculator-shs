var app=angular.module("app",["ngRoute","ui.bootstrap","ngSanitize"]);!function(){app.controller("footerCtrl",["$scope","meanData","$rootScope",function(t,n,e){t.year=(new Date).getFullYear()}]),app.controller("mainCtrl",["$scope","$rootScope",function(t,n){}]),app.directive("dateInput",function(){return{restrict:"A",scope:{ngModel:"="},link:function(t){t.ngModel&&(t.ngModel=new Date(t.ngModel))}}})}(),function(){app.config(["$routeProvider","$locationProvider",function(t,n){t.when("/home",{templateUrl:"/home/home.view.html",controller:"homeCtrl"}).when("/prediction",{templateUrl:"/prediction/prediction.view.html",controller:"predictionCtrl",controllerAs:"Prediction"}).when("/account",{templateUrl:"/account/account.view.html",controller:"accountCtrl",controllerAs:"Account"}).when("/payment",{templateUrl:"/payment/payment.view.html",controller:"paymentCtrl",controllerAs:"Payment"}).when("/account-default",{templateUrl:"/account-default/account-default.view.html",controller:"accountDefaultCtrl",controllerAs:"AccountDefault"}).when("/settings",{templateUrl:"/settings/settings.view.html",controller:"settingsCtrl",controllerAs:"Settings"}).otherwise("/"),n.html5Mode(!0)}])}(),function(){app.controller("accountDefaultCtrl",["$scope","meanData","$uibModal","$window",function(t,n,e,a){var o=this;o.rewardRulesInDB,o.accountDefaultList,o.rewardStrategy={rewardCategory:[],rewardRatio:0},o.rewardRule={rewardMax:-1,redeemMin:-1,startDate:new Date("11/11/1111"),endDate:new Date("09/09/9999"),rewardStrategy:o.rewardStrategy},o.newRewardRules=[],o.addRewardRuleRow=function(){o.newRewardRules.push(angular.copy(o.rewardRule))},o.deleteRewardRuleRow=function(t){o.newRewardRules.splice(t,1)},n.getAccountDefault().then(function(t){o.accountDefaultList=t.data.data}),n.getRewardRules().then(function(t){o.rewardRulesInDB=t.data.data}),o.removeAccountDefault=function(t){n.deleteAccountDefault(t).then(function(t){alert(t.data.msg),a.location.reload()},function(t){console.error(t)})},o.submitAccountDefault=function(t){var e=[];o.rewardRulesInDB.forEach(function(t){t.isSelected&&e.push(t._id)});var r={newAccountDefault:t,selectedRewardRuleIdList:e,newRewardRules:o.newRewardRules};n.addAccountDefault(r).then(function(t){alert(t.data.msg),a.location.reload()},function(t){console.error(t.data)})},o.showRewardRuleModal=function(t){e.open({animation:!1,templateUrl:"/account-default/reward-rule.modal.view.html",controller:function(){var n=this;n.rewardRule=t},controllerAs:"RewardRuleModal",size:"lg"})}}])}(),function(){app.controller("homeCtrl",["$scope",function(t){}])}(),function(){app.controller("accountCtrl",["$scope","$uibModal","mockService","$sce","meanData","$window",function(t,n,e,a,o,r){_this=this,o.getAccounts().then(function(t){_this.accounts=t.data.data.accountsDetails,_this.accountUpdatedDate=t.data.data.date}),_this.removeAccount=function(t){r.confirm("Do you want to delete account?")&&o.deleteAccount(t).then(function(t){alert(t.data.msg),r.location.reload()},function(t){console.error(t)})},_this.fastUpadteProperty=function(t,n,e){var a=r.prompt("Update "+t,n);null!=a&&(e[t]=a,e.updatedDate=new Date,o.updateAccount(e).then(function(t){alert(t.data.msg),r.location.reload()},function(t){console.error(t)}))},_this.showAccountModal=function(t,e){n.open({templateUrl:"/account/save/save.account.view.html",controller:"saveAccountCtrl",controllerAs:"SaveAccount",resolve:{saveAccountPageTitle:function(){return t},account:function(){return e}},size:"lg"})}}])}(),function(){app.controller("paymentCtrl",["$scope","$uibModal","$log","meanData","$window",function(t,n,e,a,o){var r=this;r.showAddTransaction=function(){n.open({templateUrl:"/payment/save/transaction/transaction.view.html",controller:"transactionCtrl",controllerAs:"Transaction",size:"lg"})},r.showAddRecurring=function(){n.open({templateUrl:"/payment/save/recurring-payment/recurring-payment.view.html",controller:"recurringPaymentCtrl",controllerAs:"RecurringPayment",size:"lg"})},r.removeTransaction=function(t){a.deleteTransaction(t).then(function(t){alert(t.data.msg),o.location.reload()})},r.removeRecurring=function(t){a.deleteRecurringPayment(t).then(function(t){alert(t.data.msg),o.location.reload()})},a.getRecurringPayments().then(function(t){r.recurringPayments=t.data.data}),a.getTransactions().then(function(t){r.transactioins=t.data.data})}])}(),function(){app.controller("predictionCtrl",["$scope","utilService","mockService","$q","$uibModal","meanData",function(t,n,e,a,o,r){var c=this;c.showStatements=!1,c.events,c.financeDangerDate,c.statements,c.calendarDisplayerOptions={},c.selectedDate=new Date,c.endDate=new Date((new Date).getFullYear(),(new Date).getMonth()+1,(new Date).getDate());var i=function(t){var n=t.date,e=t.mode;if("day"===e)for(var a=new Date(n).setHours(0,0,0,0),o=0;o<c.events.length;o++){var r=new Date(c.events[o].date).setHours(0,0,0,0);if(a===r)return c.events[o].financeStatus}return""},u=function(t){o.open({templateUrl:"/prediction/statement.modal.html",controller:function(){var n=this;n.statement=t},controllerAs:"showSelectedDateModalCtrl",size:"lg"}).result.then(function(){},function(){})};c.calculatePending=function(t){t.pending=0,t.pendingTransactions.forEach(function(n){t.pending+=n.amount})},c.doPredict=function(t,e){"undefined"!=typeof t&&null!==t&&""!=t||(t=moment()),"undefined"!=typeof e&&null!==e&&""!=e||(e=moment()),t=n.dateFormat(t,1),e=n.dateFormat(e,1),r.doFinancialPrediction(t,e).then(function(n){c.events=n.data.events,c.financeDangerDate=n.data.financeDangerDate,c.statements=n.data.statements,c.lowestBalanceInAccountList=n.data.lowestBalanceInAccountList,c.calendarDisplayerOptions={customClass:i,minDate:new Date(t),maxDate:new Date(e)}})},c.dateSelected=function(t){for(var e=0;e<c.statements.length;e++)if(c.statements[e].date===n.dateFormat(t,0))return void u(c.statements[e])},c.doPredict(void 0,c.endDate)}])}(),function(){app.controller("settingsCtrl",["$scope","meanData","$window",function(t,n,e){var a=this;a.settings,a.canTransaction,n.getSettings().then(function(t){a.settings=t.data.data[0],a.settings.accountConfirmDate=new Date(t.data.data[0].accountConfirmDate)}),a.updateSettings=function(){n.updateSettings(a.settings).then(function(t){alert(t.data.msg),e.location.reload()})},a.canHasTransaction=function(t){n.canHasTransaction(t).then(function(t){return 0==t.data.length?alert("You can't has this transaction"):void(a.avaliableAccounts=t.data)})},a.comsumptionCapacityByDate=function(t){t=moment().add(1,"day"),n.comsumptionCapacityByDate(t).then(function(t){})}}])}(),function(){app.service("meanData",["$http",function(t){var n=this;n.financialServerUrl="/rest/finance";var e=function(e,a){return t.get(n.financialServerUrl+"/predict?sd="+e+"&ed="+a)},a=function(e){return t.get(n.financialServerUrl+"/predict/coms-cap?date="+e)},o=function(e){return t.put(n.financialServerUrl+"/predict/trans",e)},r=function(){return t.get(n.financialServerUrl+"/recurring")},c=function(e){return t.post(n.financialServerUrl+"/recurring",e)},i=function(e){return t["delete"](n.financialServerUrl+"/recurring/"+e)},u=function(e){return t.get(n.financialServerUrl+"/transaction?isPending"+e)},l=function(e){return t.post(n.financialServerUrl+"/transaction",e)},s=function(e){return t.put(n.financialServerUrl+"/transaction",e)},d=function(e){return t["delete"](n.financialServerUrl+"/transaction/"+e)},f=function(){return t.get(n.financialServerUrl+"/account")},p=function(e){return t.post(n.financialServerUrl+"/account",e)},m=function(e){return t.put(n.financialServerUrl+"/account",e)},g=function(e){return t["delete"](n.financialServerUrl+"/account/"+e)},w=function(){return t.get(n.financialServerUrl+"/account/not-cc")},v=function(){return t.get(n.financialServerUrl+"/account-default")},h=function(e){return t.post(n.financialServerUrl+"/account-default",e)},D=function(e){return t["delete"](n.financialServerUrl+"/account-default/"+e)},y=function(){return t.get(n.financialServerUrl+"/reward-rule")},A=function(e){return t.post(n.financialServerUrl+"/reward-rule",e)},C=function(e){return t.put(n.financialServerUrl+"/reward-rule",e)},R=function(e){return t["delete"](n.financialServerUrl+"/reward-rule/",e)},S=function(e){return t.get(n.financialServerUrl+"/settings?need="+e)},U=function(e){return t.put(n.financialServerUrl+"/settings",e)};return{doFinancialPrediction:e,getRecurringPayments:r,addRecurringPayment:c,deleteRecurringPayment:i,getTransactions:u,addTransaction:l,updateTransaction:s,deleteTransaction:d,getAccountDefault:v,addAccountDefault:h,deleteAccountDefault:D,getAccounts:f,addAccount:p,updateAccount:m,deleteAccount:g,getRewardRules:y,addRewardRule:A,updateRewardRule:C,deleteRewardRule:R,getAccountsNotCreditCard:w,getSettings:S,updateSettings:U,canHasTransaction:o,comsumptionCapacityByDate:a}}])}(),function(){app.service("mockService",["utilService",function(t){var n=[{type:"Debit",description:"Mock Tran 1",date:"2/19/2017",amount:1200,accountName:"Citi Double Cash"},{type:"Credit",description:"Mock Tran 2",date:"3/3/2017",amount:55,accountName:"Citi Check"},{type:"Debit",description:"Mock Tran 3",date:"3/4/2017",amount:7777,accountName:"Chase Amazon Prime"}];return{getMockTransactions:n}}])}(),function(){app.service("utilService",[function(){var t=function(t,n){if(n===-1)return moment(new Date(t));if(t instanceof Date){if("undefined"==typeof n)return moment(t).format("MM/DD/YYYY");if(0===n)return moment(t).format("MM/DD/YYYY, dddd");if(1===n)return moment(t).format("MM/DD/YYYY")}if(t instanceof moment){if("undefined"==typeof n)return t.format("MM/DD/YYYY");if(0===n)return t.format("MM/DD/YYYY, dddd");if(1===n)return t.format("MM/DD/YYYY")}return console.log("Can't regonize...")},n=function(t){return"cc"===t?"CreditCard":"cash"===t?"Cash":"checking"===t?"Checking":"saving"===t?"Saving":void 0},e=function(t){return"debit"===t?"Debit":"credit"===t?"Credit":void 0};return{dateFormat:t,accountType:n,transactionType:e}}])}(),function(){app.controller("saveAccountCtrl",["$scope","saveAccountPageTitle","account","$uibModalInstance","meanData","$window",function(t,n,e,a,o,r){var c=this;c.account=e,c.nAccount={},c.nAccount.pendingTransactions=[],c.saveAccountFlag={},c.saveAccountPageTitle=n,c.transactionCategoryList=[],c.accountDefault,c.payByAccounts;var i=function(t){"boolean"==typeof t&&(c.saveAccountFlag={accountName:t,dueDate:t,closingDate:t,minPayment:t,creditLine:t,balance:t,lastBalance:t,threshold:t,resetEdit:t,resetSubmit:!t,submit:!t,edit:t,apr0Valid:t,apr0Date:t,pendingTransactions:t,rewards:t,rewardRules:t,payBy:t})},u={type:"Debit",category:null,description:null,date:null,amount:0};c.addPendingTransactionRow=function(){c.nAccount.pendingTransactions.push(angular.copy(u))},c.deletePendingTransactionRow=function(t){c.nAccount.pendingTransactions.splice(t,1)},c.updateAccount=function(t){o.updateAccount(t).then(function(t){alert(t.data.msg),r.location.reload()},function(t){console.error(t)})},c.addAccount=function(t){o.addAccount(t).then(function(t){alert(t.data.msg),r.location.reload()},function(t){console.error(t.data.message),console.error(t.data)}),c.cancelModal()},c.cancelModal=function(){a.dismiss("cancel")},c.resetEdit=function(t,n){Object.keys(t).forEach(function(e){t[e]=n[e]})},c.selectedAccountDefault=function(){c.accountDefault.forEach(function(t){t.accountName===c.nAccount.accountName&&(c.nAccount.type=t.type,c.nAccount.rewardRules=[],t.rewardRules.forEach(function(t){c.nAccount.rewardRules.push({rule:t,earned:0,startDate:new Date(t.startDate),endDate:new Date(t.endDate)})}))})},c.deleteAccount=function(t){o.deleteAccountDefault(t._id).then(function(t){})},e?(i(!0),c.account=angular.copy(e),c.nAccount=angular.copy(e)):i(!1),o.getAccountDefault().then(function(t){c.accountDefault=t.data.data}),o.getAccountsNotCreditCard().then(function(t){c.payByAccounts=t.data.data}),o.getSettings("transactionCategory").then(function(t){c.transactionCategoryList=t.data.data[0].transactionCategory})}])}(),function(){app.directive("navigation",function(){return{restrict:"EA",templateUrl:"/common/directives/navigation/navigation.view.html"}}),app.controller("navCtrl",["$scope","$location","$window","$rootScope",function(t,n,e,a){a.isActive=function(t){if("/"===t)return n.path()===t;for(var e=0;e<n.path().split("/").length;e++)if(n.path().split("/")[e]===t)return!0;return!1}}])}(),function(){app.controller("recurringPaymentCtrl",["$scope","$uibModalInstance","meanData","$window",function(t,n,e,a){var o=this;o.newRecurringPayment={},o.transactionCategoryList,o.accounts,e.getSettings("transactionCategory").then(function(t){o.transactionCategoryList=t.data.data[0].transactionCategory}),e.getAccounts().then(function(t){o.accounts=t.data.data.accountsDetails}),o.submit=function(){e.addRecurringPayment(o.newRecurringPayment).then(function(t){alert(t.data.msg),a.location.reload()},function(t){console.error(t)})},o.cancelModal=function(){n.dismiss("cancel")}}])}(),function(){app.controller("transactionCtrl",["$scope","$uibModalInstance","meanData","$window",function(t,n,e,a){var o=this;o.transactionCategoryList,o.accounts,o.newTransaction={},e.getSettings("transactionCategory").then(function(t){o.transactionCategoryList=t.data.data[0].transactionCategory}),e.getAccounts().then(function(t){o.accounts=t.data.data.accountsDetails}),o.submit=function(){e.addTransaction(o.newTransaction).then(function(t){alert(t.data.msg),a.location.reload()},function(t){console.error(t)})},o.cancelModal=function(){n.dismiss("cancel")}}])}(),function(){app.component("inputAmount",{templateUrl:"/common/components/input/amount/amount.view.html",controller:function(){},bindings:{readonly:"=",data:"="}})}();
//# sourceMappingURL=app.min.js.map
