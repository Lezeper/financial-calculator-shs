{"version":3,"sources":["app.min.js"],"names":["app","angular","module","controller","$scope","meanData","$rootScope","year","Date","getFullYear","directive","restrict","scope","ngModel","link","config","$routeProvider","$locationProvider","when","templateUrl","controllerAs","otherwise","html5Mode","$uibModal","mockService","$sce","$window","_this","this","getAccounts","then","res","accounts","data","accountsDetails","accountUpdatedDate","date","removeAccount","id","confirm","deleteAccount","alert","msg","location","reload","err","console","error","fastUpadteProperty","property","oldVal","account","newVal","prompt","updatedDate","updateAccount","showAccountModal","title","open","resolve","saveAccountPageTitle","size","rewardRulesInDB","accountDefaultList","rewardStrategy","rewardCategory","rewardRatio","rewardRule","rewardMax","redeemMin","startDate","endDate","newRewardRules","addRewardRuleRow","push","copy","deleteRewardRuleRow","index","splice","getAccountDefault","getRewardRules","removeAccountDefault","deleteAccountDefault","submitAccountDefault","newAccountDefault","selectedRewardRuleIdList","forEach","rrdb","isSelected","_id","obj","addAccountDefault","showRewardRuleModal","animation","$log","showAddTransaction","showAddRecurring","removeTransaction","deleteTransaction","removeRecurring","deleteRecurringPayment","salaryNeedForPlan","plan","result","getRecurringPayments","recurringPayments","getTransactions","transactioins","getAccountsNotCreditCard","nonCreditCardAccounts","utilService","$q","showStatements","events","financeDangerDateList","statements","calendarDisplayerOptions","selectedDate","getMonth","getDate","getDayClass","mode","dayToCheck","setHours","i","length","eventDay","financeStatus","showSelectedDateModal","statement","calculatePending","pending","pendingTransactions","pt","amount","doPredict","moment","dateFormat","doFinancialPrediction","lowestBalanceInAccountList","customClass","minDate","maxDate","dateSelected","undefined","settings","canTransaction","backupDBVersion","getSettings","accountConfirmDate","updateSettings","canHasTransaction","transaction","avaliableAccounts","comsumptionCapacityByDate","add","comsumptionCapacity","balance","backupDB","backUpDB","restoreDB","$uibModalInstance","nAccount","saveAccountFlag","transactionCategoryList","accountDefault","payByAccounts","setSaveAccountFlag","bool","accountName","dueDate","closingDate","minPayment","creditLine","lastBalance","threshold","resetEdit","resetSubmit","submit","edit","apr0Valid","apr0Date","rewards","rewardRules","payBy","newPendingTransaction","type","category","description","addPendingTransactionRow","deletePendingTransactionRow","addAccount","message","cancelModal","dismiss","editAccount","origin","Object","keys","prop","selectedAccountDefault","ad","adRewardRule","rule","earned","ancc","tc","transactionCategory","service","$http","financialServerUrl","get","transactions","put","addRecurringPayment","recurring","post","isPending","addTransaction","updateTransaction","addRewardRule","updateRewardRule","deleteRewardRule","need","getMockTransactions","flag","format","log","accountType","transactionType","$location","isActive","viewLocation","path","split","newTransaction","newRecurringPayment","component","bindings","readonly"],"mappings":"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","file":"app.min.js","sourcesContent":["var app = angular.module('app', ['ngRoute', 'ui.bootstrap', 'ngSanitize']);\r\n(function () {\r\n  app.controller('footerCtrl', ['$scope', 'meanData', '$rootScope',\r\n        function ($scope, meanData, $rootScope) {\r\n    $scope.year = new Date().getFullYear();\r\n  }]);\r\n\r\n  app.controller('mainCtrl', ['$scope', '$rootScope', function($scope, $rootScope){\r\n\r\n  }]);\r\n\r\n  app.directive('dateInput', function(){\r\n      return {\r\n          restrict : 'A',\r\n          scope : {\r\n              ngModel : '='\r\n          },\r\n          link: function (scope) {\r\n              if (scope.ngModel) scope.ngModel = new Date(scope.ngModel);\r\n          }\r\n      }\r\n  });\r\n})();\n(function(){\r\n\tapp.config(['$routeProvider', '$locationProvider',\r\n    function ($routeProvider, $locationProvider) {\r\n      $routeProvider\r\n        .when('/home', {\r\n          templateUrl: '/home/home.view.html',\r\n          controller: \"homeCtrl\"\r\n        })\r\n        .when('/prediction', {\r\n          templateUrl: \"/prediction/prediction.view.html\",\r\n          controller: \"predictionCtrl\",\r\n          controllerAs: \"Prediction\"\r\n        })\r\n        .when('/account', {\r\n          templateUrl: \"/account/account.view.html\",\r\n          controller: \"accountCtrl\",\r\n          controllerAs: \"Account\"\r\n        })\r\n        .when('/payment', {\r\n          templateUrl: \"/payment/payment.view.html\",\r\n          controller: \"paymentCtrl\",\r\n          controllerAs: \"Payment\"\r\n        })\r\n        .when('/account-default', {\r\n          templateUrl: \"/account-default/account-default.view.html\",\r\n          controller: \"accountDefaultCtrl\",\r\n          controllerAs: \"AccountDefault\"\r\n        })\r\n        .when('/settings', {\r\n          templateUrl: \"/settings/settings.view.html\",\r\n          controller: \"settingsCtrl\",\r\n          controllerAs: \"Settings\"\r\n        })\r\n        .otherwise('/');\r\n\r\n      $locationProvider.html5Mode(true);\r\n\r\n  }]);\r\n})();\n(function(){\r\n    app.controller(\"accountCtrl\", ['$scope', '$uibModal', 'mockService', '$sce', 'meanData', '$window',\r\n\t\tfunction($scope, $uibModal, mockService, $sce, meanData, $window){\r\n\t\t\r\n\t\t_this = this;\r\n\r\n\t\tmeanData.getAccounts().then(function(res){\r\n\t\t\t_this.accounts = res.data.data.accountsDetails;\r\n\t\t\t_this.accountUpdatedDate = res.data.data.date;\r\n\t\t});\r\n\r\n\t\t_this.removeAccount = function(id) {\r\n\t\t\tif($window.confirm(\"Do you want to delete account?\")){\r\n\t\t\t\tmeanData.deleteAccount(id).then(function(res){\r\n\t\t\t\t\talert(res.data.msg);\r\n\t\t\t\t\t$window.location.reload();\r\n\t\t\t\t}, function(err){\r\n\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_this.fastUpadteProperty = function(property, oldVal, account) {\r\n\t\t\tvar newVal = $window.prompt(\"Update \" + property, oldVal);\r\n\t\t\tif(newVal != null){\r\n\r\n\t\t\t\taccount[property] = newVal;\r\n\t\t\t\taccount.updatedDate = new Date();\r\n\r\n\t\t\t\tmeanData.updateAccount(account).then(function(res){\r\n\t\t\t\t\talert(res.data.msg);\r\n\t\t\t\t\t$window.location.reload();\r\n\t\t\t\t}, function(err){\t\r\n\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_this.showAccountModal = function(title, account){\r\n\t\t\t$uibModal.open({\r\n\t\t\t\ttemplateUrl: '/account/save/save.account.view.html',\r\n\t\t\t\tcontroller: 'saveAccountCtrl',\r\n\t\t\t\tcontrollerAs: 'SaveAccount',\r\n\t\t\t\tresolve: {\r\n\t\t\t\t\tsaveAccountPageTitle: function(){\r\n\t\t\t\t\t\treturn title;\r\n\t\t\t\t\t},\r\n\t\t\t\t\taccount: function() {\r\n\t\t\t\t\t\treturn account;\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\tsize: 'lg'\r\n\t\t\t});\r\n\r\n\t\t};\r\n  }]);\r\n})();\n(function(){\r\n  app.controller('accountDefaultCtrl', ['$scope', 'meanData', '$uibModal', '$window',\r\n    function($scope, meanData, $uibModal, $window){\r\n    var _this = this;\r\n\r\n    _this.rewardRulesInDB;\r\n    _this.accountDefaultList;\r\n\r\n    _this.rewardStrategy = {\r\n      rewardCategory: [],\r\n      rewardRatio: 0\r\n    }\r\n\r\n    _this.rewardRule = {\r\n      rewardMax: -1,\r\n      redeemMin: -1,\r\n      startDate: new Date('11/11/1111'),\r\n      endDate: new Date('09/09/9999'),\r\n      rewardStrategy: _this.rewardStrategy\r\n    }\r\n\r\n    _this.newRewardRules = [];\r\n\r\n    _this.addRewardRuleRow = function() {\r\n      _this.newRewardRules.push(angular.copy(_this.rewardRule));\r\n    }\r\n\r\n    _this.deleteRewardRuleRow = function(index) {\r\n      _this.newRewardRules.splice(index, 1);\r\n    }\r\n\r\n    meanData.getAccountDefault().then(function(res){\r\n      _this.accountDefaultList = res.data.data;\r\n    });\r\n\r\n    meanData.getRewardRules().then(function(res){\r\n      _this.rewardRulesInDB = res.data.data;\r\n    });\r\n\r\n    _this.removeAccountDefault = function(id) {\r\n      meanData.deleteAccountDefault(id).then(function(res){\r\n        alert(res.data.msg);\r\n        $window.location.reload();\r\n      }, function(err){\r\n        console.error(err);\r\n      });\r\n    }\r\n\r\n    _this.submitAccountDefault = function(newAccountDefault) {\r\n      var selectedRewardRuleIdList = [];\r\n\r\n      _this.rewardRulesInDB.forEach(function(rrdb){\r\n        if(rrdb.isSelected)\r\n          selectedRewardRuleIdList.push(rrdb._id);\r\n      });\r\n\r\n      var obj = {\r\n        newAccountDefault: newAccountDefault,\r\n        selectedRewardRuleIdList: selectedRewardRuleIdList,\r\n        newRewardRules: _this.newRewardRules\r\n      }\r\n\r\n      meanData.addAccountDefault(obj).then(function(res){\r\n        alert(res.data.msg);\r\n        $window.location.reload();\r\n      }, function(err){\r\n        console.error(err.data);\r\n      });\r\n    };\r\n\r\n    _this.showRewardRuleModal = function(rewardRule){\r\n\t\t\t$uibModal.open({\r\n        animation: false,\r\n\t\t\t\ttemplateUrl: '/account-default/reward-rule.modal.view.html',\r\n\t\t\t\tcontroller: function(){\r\n          var _this = this;\r\n          _this.rewardRule = rewardRule;\r\n        },\r\n        controllerAs: 'RewardRuleModal',\r\n\t\t\t\tsize: 'lg'\r\n\t\t\t});\r\n\t\t};\r\n  }]);\r\n})();\n(function(){\r\n  app.controller(\"homeCtrl\", ['$scope', function($scope){\r\n\r\n  }]);\r\n})();\n(function(){\r\n\tapp.controller(\"paymentCtrl\", ['$scope', '$uibModal', '$log', 'meanData', '$window',\r\n\tfunction($scope, $uibModal, $log, meanData, $window){\r\n\t\tvar _this = this;\r\n\r\n\t\t_this.showAddTransaction = function() {\r\n\t\t\t$uibModal.open({\r\n\t\t\t\ttemplateUrl: '/payment/save/transaction/transaction.view.html',\r\n\t\t\t\tcontroller: 'transactionCtrl',\r\n\t\t\t\tcontrollerAs: 'Transaction',\r\n\t\t\t\tsize: 'lg'\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t_this.showAddRecurring = function() {\r\n\t\t\t$uibModal.open({\r\n\t\t\t\ttemplateUrl: '/payment/save/recurring-payment/recurring-payment.view.html',\r\n\t\t\t\tcontroller: 'recurringPaymentCtrl',\r\n\t\t\t\tcontrollerAs: 'RecurringPayment',\r\n\t\t\t\tsize: 'lg'\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t_this.removeTransaction = function(id) {\r\n\t\t\tmeanData.deleteTransaction(id).then(function(res){\r\n\t\t\t\talert(res.data.msg);\r\n\t\t\t\t$window.location.reload();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t_this.removeRecurring = function(id) {\r\n\t\t\tmeanData.deleteRecurringPayment(id).then(function(res){\r\n\t\t\t\talert(res.data.msg);\r\n\t\t\t\t$window.location.reload();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t_this.salaryNeedForPlan = function(plan) {\r\n\t\t\tmeanData.salaryNeedForPlan(plan).then(function(res){\r\n\t\t\t\tplan.result = res.data.data;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tmeanData.getRecurringPayments().then(function(res){\r\n\t\t\t_this.recurringPayments = res.data.data;\r\n\t\t});\r\n\r\n\t\tmeanData.getTransactions().then(function(res){\r\n\t\t\t_this.transactioins = res.data.data;\r\n\t\t});\r\n\r\n\t\tmeanData.getAccountsNotCreditCard().then(function(res){\r\n\t\t\t_this.nonCreditCardAccounts = res.data.data;\r\n\t\t});\r\n\t}]);\r\n})();\n(function(){\r\n\tapp.controller('predictionCtrl', ['$scope', 'utilService', 'mockService', '$q', '$uibModal', 'meanData',\r\n\t\tfunction($scope, utilService, mockService, $q, $uibModal, meanData){\r\n\t\tvar _this = this;\r\n\t\t// initial controller level val here...\r\n\t\t_this.showStatements = false;\r\n\t\t_this.events;\r\n\t\t_this.financeDangerDateList;\r\n\t\t_this.statements;\r\n\t\t_this.calendarDisplayerOptions = {};  // Calendar Settings\r\n\t\t// ngModel can't handle moment object, so still using Date object here...\r\n\t\t_this.selectedDate = new Date();\r\n\t\t_this.endDate = new Date(new Date().getFullYear(), new Date().getMonth() + 1, new Date().getDate());\r\n\r\n\t\tvar getDayClass = function(data) {\r\n\t\t\tvar date = data.date;\r\n\t\t\tvar mode = data.mode;\r\n\t\t\tif(mode === 'day') {\r\n\t\t\t\tvar dayToCheck = new Date(date).setHours(0,0,0,0);\r\n\t\t\t\tfor(var i = 0; i < _this.events.length; i++){\r\n\t\t\t\t\tvar eventDay = new Date(_this.events[i].date).setHours(0,0,0,0);\r\n\t\t\t\t\tif(dayToCheck === eventDay) {\r\n\t\t\t\t\t\treturn _this.events[i].financeStatus;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn '';\r\n\t\t}\r\n\r\n\t\tvar showSelectedDateModal = function(statement) {\r\n\t\t\t$uibModal.open({\r\n\t\t\t\ttemplateUrl: '/prediction/statement.modal.html',\r\n\t\t\t\tcontroller: function(){\r\n\t\t\t\t\tvar _this = this;\r\n\t\t\t\t\t_this.statement = statement;\r\n\t\t\t\t},\r\n\t\t\t\tcontrollerAs: \"showSelectedDateModalCtrl\",\r\n\t\t\t\tsize: 'lg'\r\n\t\t\t}).result.then(function () {\r\n\t\t\t\t\r\n\t\t\t}, function () {\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t_this.calculatePending = function(account) {\r\n\t\t\taccount.pending = 0;\r\n\t\t\taccount.pendingTransactions.forEach(function(pt){\r\n\t\t\t\taccount.pending += pt.amount;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t_this.doPredict = function(startDate, endDate) {\r\n\t\t\tif(typeof startDate === 'undefined' || startDate === null || startDate == '')\r\n\t\t\t\tstartDate = moment();\r\n\t\t\tif(typeof endDate === 'undefined' || endDate === null || endDate == '')\r\n\t\t\t\tendDate = moment();\r\n\t\t\t\r\n\t\t\tstartDate = utilService.dateFormat(startDate, 1);\r\n\t\t\tendDate = utilService.dateFormat(endDate, 1);\r\n\r\n\t\t\tmeanData.doFinancialPrediction(startDate, endDate).then(function(res){\r\n\t\t\t\t_this.events = res.data.events;\r\n\t\t\t\t_this.financeDangerDateList = res.data.financeDangerDateList;\r\n\t\t\t\t_this.statements = res.data.statements;\r\n\t\t\t\t_this.lowestBalanceInAccountList = res.data.lowestBalanceInAccountList;\r\n\r\n\t\t\t\t_this.calendarDisplayerOptions = {\r\n\t\t\t\t\tcustomClass: getDayClass,\r\n\t\t\t\t\tminDate: new Date(startDate),\r\n\t\t\t\t\tmaxDate: new Date(endDate)\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t_this.dateSelected = function(date) {\r\n\t\t\tfor(var i = 0; i < _this.statements.length; i++) {\r\n\t\t\t\tif(_this.statements[i].date === utilService.dateFormat(date, 0)) {\r\n\t\t\t\t\tshowSelectedDateModal(_this.statements[i]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t/*\r\n\t\t// TODO: It may cause infinite changes.... After changes, the index may change...\r\n\r\n\t\t$scope.deleteTransaction = function(parentIndex, index, startDate, endDate) {\r\n\t\t\tgetAccountsAndPaymentsData().then(function(res){\r\n\t\t\t\tres[1].splice(index, 1);\r\n\t\t\t\tdoPredict(startDate, endDate, res[0], res[1], res[2]);\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t$scope.addTransactions = function(startDate, endDate) {\r\n\t\t\tvar transactions = mockService.getMockTransactions;\r\n\r\n\t\t\tgetAccountsAndPaymentsData().then(function(res){\r\n\t\t\t\ttransactions.forEach(function(transaction){\r\n\t\t\t\t\tres[1].push(transaction);\r\n\t\t\t\t});\r\n\t\t\t\tdoPredict(startDate, endDate, res[0], res[1], res[2], res[3]);\r\n\t\t\t});\r\n\t\t}*/\r\n\r\n\t\t_this.doPredict(undefined, _this.endDate);\r\n\t}]);\r\n})();\n(function(){\r\n  app.controller('settingsCtrl', ['$scope', 'meanData', '$window', \r\n    function($scope, meanData, $window){\r\n    var _this = this;\r\n    _this.settings;\r\n    _this.canTransaction;\r\n    _this.backupDBVersion;\r\n\r\n    meanData.getSettings().then(function(res){\r\n      _this.settings = res.data.data[0];\r\n      _this.settings.accountConfirmDate = new Date(res.data.data[0].accountConfirmDate);\r\n    });\r\n\r\n    _this.updateSettings = function() {\r\n      meanData.updateSettings(_this.settings).then(function(res){\r\n        alert(res.data.msg);\r\n        $window.location.reload();\r\n      });\r\n    }\r\n\r\n    _this.canHasTransaction = function(transaction){\r\n      meanData.canHasTransaction(transaction).then(function(res){\r\n        if(res.data.length == 0)\r\n          return alert(\"You can't has this transaction\");\r\n        _this.avaliableAccounts = res.data;\r\n      });\r\n    }\r\n\r\n    _this.comsumptionCapacityByDate = function(date) {\r\n      date = moment().add(1, 'day');\r\n      meanData.comsumptionCapacityByDate(date).then(function(res){\r\n        _this.settings.comsumptionCapacity = res.data.balance;\r\n      });\r\n    }\r\n\r\n    _this.backupDB = function() {\r\n      if(_this.settings._id) {\r\n        meanData.backUpDB(_this.settings._id).then(function(res){\r\n          alert(res.data.msg);\r\n          $window.location.reload();\r\n        });\r\n      }\r\n    }\r\n\r\n    _this.restoreDB = function() {\r\n      if(_this.settings._id) {\r\n        meanData.restoreDB(_this.settings._id).then(function(res){\r\n          alert(res.data.msg);\r\n          $window.location.reload();\r\n        });\r\n      }\r\n    }\r\n  }]);\r\n})();\n(function(){\r\n    app.controller(\"saveAccountCtrl\", ['$scope', 'saveAccountPageTitle', 'account', '$uibModalInstance', 'meanData', '$window',\r\n        function($scope, saveAccountPageTitle, account, $uibModalInstance, meanData, $window){\r\n        // initial data here...\r\n        var _this = this;\r\n        _this.account = account;\r\n        _this.nAccount = {};\r\n        _this.nAccount.pendingTransactions = [];\r\n        _this.saveAccountFlag = {};\r\n        _this.saveAccountPageTitle = saveAccountPageTitle;\r\n        _this.transactionCategoryList = [];\r\n        _this.accountDefault;\r\n        _this.payByAccounts;\r\n\r\n        var setSaveAccountFlag = function(bool) {\r\n            if(typeof bool !== 'boolean')\r\n                return;\r\n            _this.saveAccountFlag = {\r\n                \"accountName\": bool,\r\n                \"dueDate\": bool,\r\n                \"closingDate\": bool,\r\n                \"minPayment\": bool,\r\n                \"creditLine\": bool,\r\n                \"balance\": bool,\r\n                \"lastBalance\": bool,\r\n                \"threshold\": bool,\r\n                \"resetEdit\": bool,\r\n                \"resetSubmit\": !bool,\r\n                \"submit\": !bool,\r\n                \"edit\": bool,\r\n                \"apr0Valid\": bool,\r\n                \"apr0Date\": bool,\r\n                \"pendingTransactions\": bool,\r\n                \"rewards\": bool,\r\n                \"rewardRules\": bool,\r\n                \"payBy\": bool,\r\n            };\r\n        }\r\n\r\n        var newPendingTransaction = {\r\n            type: \"Debit\",\r\n            category: null,\r\n            description: null,\r\n            date: null,\r\n            amount: 0\r\n        }\r\n\r\n        _this.addPendingTransactionRow = function() {\r\n            _this.nAccount.pendingTransactions.push(angular.copy(newPendingTransaction));\r\n        }\r\n\r\n        _this.deletePendingTransactionRow = function(index) {\r\n            _this.nAccount.pendingTransactions.splice(index, 1);\r\n        }\r\n\r\n        _this.updateAccount = function(account) {\r\n            meanData.updateAccount(account).then(function(res){\r\n                alert(res.data.msg);\r\n                $window.location.reload();\r\n            }, function(err){\r\n                console.error(err);\r\n            });\r\n        }\r\n\r\n        _this.addAccount = function(account) {\r\n            meanData.addAccount(account).then(function(res){\r\n                alert(res.data.msg);\r\n                $window.location.reload();\r\n            },function(err){\r\n                console.error(err.data.message);\r\n                console.error(err.data);\r\n            });\r\n            _this.cancelModal();\r\n        }\r\n\r\n        _this.cancelModal = function() {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        _this.resetEdit = function(editAccount, origin) {\r\n            Object.keys(editAccount).forEach(function(prop){\r\n                editAccount[prop] = origin[prop];\r\n            });\r\n        }\r\n\r\n        _this.selectedAccountDefault = function() {\r\n            _this.accountDefault.forEach(function(ad){\r\n                if(ad.accountName === _this.nAccount.accountName) {\r\n                    _this.nAccount.type = ad.type;\r\n                    _this.nAccount.rewardRules = [];\r\n                    ad.rewardRules.forEach(function(adRewardRule){\r\n                        _this.nAccount.rewardRules.push({\r\n                            rule: adRewardRule,\r\n                            earned: 0,\r\n                            startDate: new Date(adRewardRule.startDate),\r\n                            endDate: new Date(adRewardRule.endDate)\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        _this.deleteAccount = function(account) {\r\n            meanData.deleteAccountDefault(account._id).then(function(res){\r\n                // after delete\r\n            });\r\n        }\r\n\r\n        // edit or check account details\r\n        if(account) {\r\n            setSaveAccountFlag(true);\r\n            // date format\r\n            _this.account = angular.copy(account);\r\n            _this.nAccount = angular.copy(account);\r\n        } else {\r\n            // add new account\r\n            setSaveAccountFlag(false);\r\n        }\r\n\r\n        meanData.getAccountDefault().then(function(ad){\r\n            _this.accountDefault = ad.data.data;\r\n        });\r\n        meanData.getAccountsNotCreditCard().then(function(ancc){\r\n            _this.payByAccounts = ancc.data.data;\r\n        });\r\n        meanData.getSettings('transactionCategory').then(function(tc){\r\n            _this.transactionCategoryList = tc.data.data[0].transactionCategory;\r\n        });\r\n    }]);\r\n})();\n(function () {\r\n  app.service('meanData', ['$http',\r\n      function meanData($http) {\r\n    \r\n    var _this = this;\r\n    \r\n    _this.financialServerUrl = '/rest/finance';\r\n\r\n    var doFinancialPrediction = function(startDate, endDate) {\r\n      return $http.get(_this.financialServerUrl + '/predict?sd=' + startDate + '&ed=' + endDate);\r\n    }\r\n    \r\n    var comsumptionCapacityByDate = function(date) {\r\n      return $http.get(_this.financialServerUrl + '/predict/coms-cap?date=' + date);\r\n    }\r\n\r\n    var canHasTransaction = function(transactions) {\r\n      return $http.put(_this.financialServerUrl + '/predict/trans-perm', transactions);\r\n    }\r\n\r\n    var salaryNeedForPlan = function(plan) {\r\n      return $http.put(_this.financialServerUrl + '/predict/salary-need', plan);\r\n    }\r\n\r\n    /* Recurring Payment */\r\n    var getRecurringPayments = function() {\r\n      return $http.get(_this.financialServerUrl + '/recurring');\r\n    }\r\n\r\n    var addRecurringPayment = function(recurring) {\r\n      return $http.post(_this.financialServerUrl + '/recurring', recurring);\r\n    }\r\n\r\n    var updateRecurringPayment = function(recurring) {\r\n      return $http.put(_this.financialServerUrl + '/recurring', recurring);\r\n    }\r\n\r\n    var deleteRecurringPayment = function(id) {\r\n      return $http.delete(_this.financialServerUrl + '/recurring/' + id);\r\n    }\r\n\r\n    /* Transaction */\r\n    var getTransactions = function(isPending) {\r\n      return $http.get(_this.financialServerUrl + '/transaction?isPending' + isPending);\r\n    }\r\n\r\n    var addTransaction = function(transaction) {\r\n      return $http.post(_this.financialServerUrl + '/transaction', transaction);\r\n    }\r\n\r\n    var updateTransaction = function(transaction) {\r\n      return $http.put(_this.financialServerUrl + '/transaction', transaction);\r\n    }\r\n\r\n    var deleteTransaction = function(id) {\r\n      return $http.delete(_this.financialServerUrl + '/transaction/' + id);\r\n    }\r\n\r\n    /* Account */\r\n    var getAccounts = function() {\r\n      return $http.get(_this.financialServerUrl + '/account');\r\n    }\r\n\r\n    var addAccount = function(account) {\r\n      return $http.post(_this.financialServerUrl + '/account', account);\r\n    }\r\n\r\n    var updateAccount = function(account) {\r\n      return $http.put(_this.financialServerUrl + '/account', account);\r\n    }\r\n\r\n    var deleteAccount = function(id) {\r\n      return $http.delete(_this.financialServerUrl + '/account/' + id);\r\n    }\r\n\r\n    var getAccountsNotCreditCard = function() {\r\n      return $http.get(_this.financialServerUrl + '/account/not-cc');\r\n    }\r\n\r\n    /* Account Default */\r\n    var getAccountDefault = function() {\r\n      return $http.get(_this.financialServerUrl + '/account-default');\r\n    }\r\n\r\n    var addAccountDefault = function(accountDefault) {\r\n      return $http.post(_this.financialServerUrl + '/account-default', accountDefault);\r\n    }\r\n\r\n    var deleteAccountDefault = function(id) {\r\n      return $http.delete(_this.financialServerUrl + '/account-default/' + id);\r\n    }\r\n\r\n    /* Reward Rule */\r\n    var getRewardRules = function() {\r\n      return $http.get(_this.financialServerUrl + '/reward-rule');\r\n    }\r\n\r\n    var addRewardRule = function(rewardRule) {\r\n      return $http.post(_this.financialServerUrl + '/reward-rule', rewardRule);\r\n    }\r\n\r\n    var updateRewardRule = function(rewardRule) {\r\n      return $http.put(_this.financialServerUrl + '/reward-rule', rewardRule);\r\n    }\r\n\r\n    var deleteRewardRule = function(id) {\r\n      return $http.delete(_this.financialServerUrl + '/reward-rule/', id);\r\n    }\r\n\r\n    /* Setting */\r\n    var getSettings = function(need) {\r\n      return $http.get(_this.financialServerUrl + '/settings?need=' + need);\r\n    }\r\n\r\n    var updateSettings = function(settings) {\r\n      return $http.put(_this.financialServerUrl + '/settings', settings);\r\n    }\r\n\r\n    var backUpDB = function(id) {\r\n      return $http.put(_this.financialServerUrl + '/settings/db-backup?id=' + id);\r\n    }\r\n\r\n    var restoreDB = function(id) {\r\n      return $http.put(_this.financialServerUrl + '/settings/db-restore?id=' + id);\r\n    }\r\n\r\n    return {\r\n      doFinancialPrediction: doFinancialPrediction,\r\n      getRecurringPayments: getRecurringPayments,\r\n      addRecurringPayment: addRecurringPayment,\r\n      deleteRecurringPayment: deleteRecurringPayment,\r\n      getTransactions: getTransactions,\r\n      addTransaction: addTransaction,\r\n      updateTransaction: updateTransaction,\r\n      deleteTransaction: deleteTransaction,\r\n      getAccountDefault: getAccountDefault,\r\n      addAccountDefault: addAccountDefault,\r\n      deleteAccountDefault: deleteAccountDefault,\r\n      getAccounts: getAccounts,\r\n      addAccount: addAccount,\r\n      updateAccount: updateAccount,\r\n      deleteAccount: deleteAccount,\r\n      getRewardRules: getRewardRules,\r\n      addRewardRule: addRewardRule,\r\n      updateRewardRule: updateRewardRule,\r\n      deleteRewardRule: deleteRewardRule,\r\n      getAccountsNotCreditCard: getAccountsNotCreditCard,\r\n      getSettings: getSettings,\r\n      updateSettings: updateSettings,\r\n      canHasTransaction: canHasTransaction,\r\n      comsumptionCapacityByDate: comsumptionCapacityByDate,\r\n      salaryNeedForPlan: salaryNeedForPlan,\r\n      backUpDB: backUpDB,\r\n      restoreDB: restoreDB\r\n    }\r\n  }])\r\n})();\n(function(){\r\n  app.service('mockService', ['utilService', function(utilService){\r\n    var getMockTransactions = [\r\n      {\r\n        type: \"Debit\",\r\n        description: \"Mock Tran 1\",\r\n        date: \"2/19/2017\",\r\n        amount: 1200,\r\n        accountName: \"Citi Double Cash\"\r\n      },\r\n      {\r\n        type: \"Credit\",\r\n        description: \"Mock Tran 2\",\r\n        date: \"3/3/2017\",\r\n        amount: 55,\r\n        accountName: \"Citi Check\"\r\n      },\r\n      {\r\n        type: \"Debit\",\r\n        description: \"Mock Tran 3\",\r\n        date: \"3/4/2017\",\r\n        amount: 7777,\r\n        accountName: \"Chase Amazon Prime\"\r\n      },\r\n    ]\r\n\r\n    return {\r\n      getMockTransactions: getMockTransactions\r\n    }\r\n  }]);\r\n})();\n(function(){\r\n  app.service('utilService', [function(){\r\n    // flag -1: return moment object\r\n\t\t// flag 0: return string; add weekday, 2/17/2017 Tuesday\r\n\t\t// flag 1: return string; month day year, 2/2/2017\r\n\t\tvar dateFormat = function(date, flag){\r\n\t\t\tif(flag === -1) \r\n\t\t\t\treturn moment(new Date(date));\r\n\r\n\t\t\tif (date instanceof Date) {\r\n\t\t\t\tif(typeof flag === 'undefined')\r\n\t\t\t\t\treturn moment(date).format('MM/DD/YYYY');\r\n\t\t\t\tif (flag === 0)\r\n\t\t\t\t\treturn moment(date).format('MM/DD/YYYY, dddd');\r\n\t\t\t\tif (flag === 1)\r\n\t\t\t\t\treturn moment(date).format('MM/DD/YYYY');\r\n\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\tif (date instanceof moment) {\r\n\t\t\t\tif(typeof flag === 'undefined')\r\n\t\t\t\t\treturn date.format('MM/DD/YYYY');\r\n\t\t\t\tif (flag === 0)\r\n\t\t\t\t\treturn date.format('MM/DD/YYYY, dddd');\r\n\t\t\t\tif (flag === 1)\r\n\t\t\t\t\treturn date.format('MM/DD/YYYY');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn console.log(\"Can't regonize...\");\r\n\t\t}\r\n\t\t\r\n\t\tvar accountType = function(type) {\r\n\t\t\tif (type === 'cc')\r\n\t\t\t\treturn 'CreditCard';\r\n\t\t\tif(type === 'cash')\r\n\t\t\t\treturn 'Cash';\r\n\t\t\tif(type === 'checking')\r\n\t\t\t\treturn 'Checking';\r\n\t\t\tif(type === 'saving')\r\n\t\t\t\treturn 'Saving';\r\n\t\t}\r\n\r\n\t\tvar transactionType = function(type) {\r\n\t\t\tif(type === 'debit')\r\n\t\t\t\treturn 'Debit';\r\n\t\t\tif(type === 'credit')\r\n\t\t\t\treturn 'Credit';\r\n\t\t}\r\n\r\n    return {\r\n      dateFormat: dateFormat,\r\n\t\t\taccountType: accountType,\r\n\t\t\ttransactionType: transactionType\r\n    }\r\n  }]);\r\n})();\n(function () {\r\n  app.directive('navigation', function () {\r\n    return {\r\n      restrict: 'EA',\r\n      templateUrl: '/common/directives/navigation/navigation.view.html'\r\n    }\r\n  });\r\n\r\n  app.controller('navCtrl', ['$scope', '$location', '$window', '$rootScope',\r\n  function($scope, $location, $window, $rootScope){\r\n\t\r\n    $rootScope.isActive = function(viewLocation){\r\n      if(viewLocation === '/')\r\n        return $location.path() === viewLocation;\r\n        for(var i = 0; i < $location.path().split('/').length; i++) {\r\n          if($location.path().split('/')[i] === viewLocation)\r\n            return true;\r\n        }\r\n      return false;\r\n    };\r\n  }])\r\n})();\n(function(){\r\n    app.controller(\"transactionCtrl\", ['$scope', '$uibModalInstance', 'meanData', '$window',\r\n        function($scope, $uibModalInstance, meanData, $window){\r\n\r\n        var _this = this;\r\n        _this.transactionCategoryList;\r\n        _this.accounts;\r\n        _this.newTransaction = {};\r\n\r\n        meanData.getSettings('transactionCategory').then(function(res){\r\n            _this.transactionCategoryList = res.data.data[0].transactionCategory;\r\n        });\r\n\r\n        meanData.getAccounts().then(function(res){\r\n            _this.accounts = res.data.data.accountsDetails;\r\n        });\r\n\r\n        _this.submit = function() {\r\n            meanData.addTransaction(_this.newTransaction).then(function(res){\r\n                alert(res.data.msg);\r\n                $window.location.reload();\r\n            }, function(err){\r\n                console.error(err);\r\n            });\r\n        }\r\n\r\n        _this.cancelModal = function() {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n    }]);\r\n})();\n(function(){\r\n    app.controller(\"recurringPaymentCtrl\", ['$scope', '$uibModalInstance', 'meanData', '$window',\r\n        function($scope, $uibModalInstance, meanData, $window){\r\n        \r\n        var _this = this;\r\n        _this.newRecurringPayment = {};\r\n        _this.transactionCategoryList;\r\n        _this.accounts;\r\n\r\n        meanData.getSettings('transactionCategory').then(function(res){\r\n            _this.transactionCategoryList = res.data.data[0].transactionCategory;\r\n        });\r\n\r\n        meanData.getAccounts().then(function(res){\r\n            _this.accounts = res.data.data.accountsDetails;\r\n        });\r\n\r\n        _this.submit = function() {\r\n            meanData.addRecurringPayment(_this.newRecurringPayment).then(function(res){\r\n                alert(res.data.msg);\r\n                $window.location.reload();\r\n            }, function(err){\r\n                console.error(err);\r\n            });\r\n        }\r\n\r\n        _this.cancelModal = function() {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n    }]);\r\n})();\n(function(){\r\n    app.component('inputAmount', {\r\n        templateUrl: \"/common/components/input/amount/amount.view.html\",\r\n        controller: function testController(){\r\n\r\n        },\r\n        bindings: {\r\n            readonly: '=',\r\n            data: '='\r\n        }\r\n    });\r\n})();"]}