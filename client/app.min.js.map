{"version":3,"sources":["app.min.js"],"names":["app","angular","module","controller","$scope","meanData","$rootScope","year","Date","getFullYear","utilService","loading","$watch","newVal","console","log","directive","restrict","scope","ngModel","link","config","$routeProvider","$locationProvider","when","templateUrl","controllerAs","otherwise","html5Mode","$uibModal","$window","_this","this","rewardRulesInDB","accountDefaultList","rewardStrategy","rewardCategory","rewardRatio","rewardRule","rewardMax","redeemMin","startDate","endDate","newRewardRules","addRewardRuleRow","push","copy","deleteRewardRuleRow","index","splice","getAccountDefault","then","res","data","getRewardRules","removeAccountDefault","id","deleteAccountDefault","alert","msg","location","reload","err","error","submitAccountDefault","newAccountDefault","selectedRewardRuleIdList","forEach","rrdb","isSelected","_id","obj","addAccountDefault","showRewardRuleModal","open","animation","size","mockService","$sce","getAccounts","accounts","accountsDetails","accountUpdatedDate","date","removeAccount","confirm","deleteAccount","fastUpadteProperty","property","oldVal","account","prompt","updatedDate","updateAccount","showAccountModal","title","resolve","saveAccountPageTitle","$log","showAddTransaction","showAddRecurring","removeTransaction","deleteTransaction","removeRecurring","deleteRecurringPayment","salaryNeedForPlan","plan","result","getRecurringPayments","recurringPayments","getTransactions","transactioins","getAccountsNotCreditCard","nonCreditCardAccounts","$q","showStatements","events","currentFinanceSafe","statements","calendarDisplayerOptions","selectedDate","getMonth","getDate","getDayClass","mode","dayToCheck","setHours","i","length","eventDay","financeStatus","showSelectedDateModal","statement","calculatePending","pending","pendingTransactions","pt","amount","doPredict","moment","dateFormat","doFinancialPrediction","lowestBalanceInAccountList","customClass","minDate","maxDate","dateSelected","undefined","settings","canTransaction","backupDBVersion","getSettings","accountConfirmDate","updateSettings","canHasTransaction","transaction","avaliableAccounts","comsumptionCapacityByDate","add","comsumptionCapacity","balance","backupDB","backUpDB","restoreDB","$uibModalInstance","nAccount","saveAccountFlag","transactionCategoryList","accountDefault","payByAccounts","setSaveAccountFlag","bool","accountName","last4Num","dueDate","closingDate","minPayment","creditLine","lastBalance","threshold","resetEdit","resetSubmit","submit","edit","apr0Valid","apr0Date","rewards","rewardRules","payBy","backupPaymentAccount","avaliableBalance","newPendingTransaction","type","category","description","addPendingTransactionRow","deletePendingTransactionRow","addAccount","message","cancelModal","dismiss","editAccount","origin","Object","keys","prop","selectedAccountDefault","ad","adRewardRule","rule","earned","ancc","tc","transactionCategory","service","$http","financialServerUrl","get","transactions","put","addRecurringPayment","recurring","post","isPending","addTransaction","updateTransaction","addRewardRule","updateRewardRule","deleteRewardRule","need","getMockTransactions","flag","format","accountType","transactionType","newRecurringPayment","newTransaction","$location","isActive","viewLocation","path","split","component","bindings","readonly"],"mappings":"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","file":"app.min.js","sourcesContent":["var app = angular.module('app', ['ngRoute', 'ui.bootstrap', 'ngSanitize']);\r\n(function () {\r\n  app.controller('footerCtrl', ['$scope', 'meanData', '$rootScope',\r\n        function ($scope, meanData, $rootScope) {\r\n    $scope.year = new Date().getFullYear();\r\n  }]);\r\n\r\n  app.controller('mainCtrl', ['$scope', '$rootScope', 'utilService', \r\n    function($scope, $rootScope, utilService){\r\n        $scope.loading = false;\r\n\r\n        $scope.$watch(function(){\r\n            return utilService.loading;\r\n        },function(newVal){\r\n            $scope.loading = newVal;\r\n            console.log($scope.loading);\r\n        });\r\n  }]);\r\n\r\n  app.directive('dateInput', function(){\r\n      return {\r\n          restrict : 'A',\r\n          scope : {\r\n              ngModel : '='\r\n          },\r\n          link: function (scope) {\r\n              if (scope.ngModel) scope.ngModel = new Date(scope.ngModel);\r\n          }\r\n      }\r\n  });\r\n})();\n(function(){\r\n\tapp.config(['$routeProvider', '$locationProvider',\r\n    function ($routeProvider, $locationProvider) {\r\n      $routeProvider\r\n        .when('/home', {\r\n          templateUrl: '/home/home.view.html',\r\n          controller: \"homeCtrl\"\r\n        })\r\n        .when('/prediction', {\r\n          templateUrl: \"/prediction/prediction.view.html\",\r\n          controller: \"predictionCtrl\",\r\n          controllerAs: \"Prediction\"\r\n        })\r\n        .when('/account', {\r\n          templateUrl: \"/account/account.view.html\",\r\n          controller: \"accountCtrl\",\r\n          controllerAs: \"Account\"\r\n        })\r\n        .when('/payment', {\r\n          templateUrl: \"/payment/payment.view.html\",\r\n          controller: \"paymentCtrl\",\r\n          controllerAs: \"Payment\"\r\n        })\r\n        .when('/account-default', {\r\n          templateUrl: \"/account-default/account-default.view.html\",\r\n          controller: \"accountDefaultCtrl\",\r\n          controllerAs: \"AccountDefault\"\r\n        })\r\n        .when('/settings', {\r\n          templateUrl: \"/settings/settings.view.html\",\r\n          controller: \"settingsCtrl\",\r\n          controllerAs: \"Settings\"\r\n        })\r\n        .otherwise('/');\r\n\r\n      $locationProvider.html5Mode(true);\r\n\r\n  }]);\r\n})();\n(function(){\r\n  app.controller('accountDefaultCtrl', ['$scope', 'meanData', '$uibModal', '$window',\r\n    function($scope, meanData, $uibModal, $window){\r\n    var _this = this;\r\n\r\n    _this.rewardRulesInDB;\r\n    _this.accountDefaultList;\r\n\r\n    _this.rewardStrategy = {\r\n      rewardCategory: [],\r\n      rewardRatio: 0\r\n    }\r\n\r\n    _this.rewardRule = {\r\n      rewardMax: -1,\r\n      redeemMin: -1,\r\n      startDate: new Date('11/11/1111'),\r\n      endDate: new Date('09/09/9999'),\r\n      rewardStrategy: _this.rewardStrategy\r\n    }\r\n\r\n    _this.newRewardRules = [];\r\n\r\n    _this.addRewardRuleRow = function() {\r\n      _this.newRewardRules.push(angular.copy(_this.rewardRule));\r\n    }\r\n\r\n    _this.deleteRewardRuleRow = function(index) {\r\n      _this.newRewardRules.splice(index, 1);\r\n    }\r\n\r\n    meanData.getAccountDefault().then(function(res){\r\n      _this.accountDefaultList = res.data.data;\r\n    });\r\n\r\n    meanData.getRewardRules().then(function(res){\r\n      _this.rewardRulesInDB = res.data.data;\r\n    });\r\n\r\n    _this.removeAccountDefault = function(id) {\r\n      meanData.deleteAccountDefault(id).then(function(res){\r\n        alert(res.data.msg);\r\n        $window.location.reload();\r\n      }, function(err){\r\n        console.error(err);\r\n      });\r\n    }\r\n\r\n    _this.submitAccountDefault = function(newAccountDefault) {\r\n      var selectedRewardRuleIdList = [];\r\n\r\n      _this.rewardRulesInDB.forEach(function(rrdb){\r\n        if(rrdb.isSelected)\r\n          selectedRewardRuleIdList.push(rrdb._id);\r\n      });\r\n\r\n      var obj = {\r\n        newAccountDefault: newAccountDefault,\r\n        selectedRewardRuleIdList: selectedRewardRuleIdList,\r\n        newRewardRules: _this.newRewardRules\r\n      }\r\n\r\n      meanData.addAccountDefault(obj).then(function(res){\r\n        alert(res.data.msg);\r\n        $window.location.reload();\r\n      }, function(err){\r\n        console.error(err.data);\r\n      });\r\n    };\r\n\r\n    _this.showRewardRuleModal = function(rewardRule){\r\n\t\t\t$uibModal.open({\r\n        animation: false,\r\n\t\t\t\ttemplateUrl: '/account-default/reward-rule.modal.view.html',\r\n\t\t\t\tcontroller: function(){\r\n          var _this = this;\r\n          _this.rewardRule = rewardRule;\r\n        },\r\n        controllerAs: 'RewardRuleModal',\r\n\t\t\t\tsize: 'lg'\r\n\t\t\t});\r\n\t\t};\r\n  }]);\r\n})();\n(function(){\r\n    app.controller(\"accountCtrl\", ['$scope', '$uibModal', 'mockService', '$sce', 'meanData', '$window',\r\n\t\tfunction($scope, $uibModal, mockService, $sce, meanData, $window){\r\n\t\t\r\n\t\t_this = this;\r\n\r\n\t\tmeanData.getAccounts().then(function(res){\r\n\t\t\t_this.accounts = res.data.data.accountsDetails;\r\n\t\t\t_this.accountUpdatedDate = res.data.data.date;\r\n\t\t});\r\n\r\n\t\t_this.removeAccount = function(id) {\r\n\t\t\tif($window.confirm(\"Do you want to delete account?\")){\r\n\t\t\t\tmeanData.deleteAccount(id).then(function(res){\r\n\t\t\t\t\talert(res.data.msg);\r\n\t\t\t\t\t$window.location.reload();\r\n\t\t\t\t}, function(err){\r\n\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_this.fastUpadteProperty = function(property, oldVal, account) {\r\n\t\t\tvar newVal = $window.prompt(\"Update \" + property, oldVal);\r\n\t\t\tif(newVal != null){\r\n\r\n\t\t\t\taccount[property] = newVal;\r\n\t\t\t\taccount.updatedDate = new Date();\r\n\r\n\t\t\t\tmeanData.updateAccount(account).then(function(res){\r\n\t\t\t\t\talert(res.data.msg);\r\n\t\t\t\t\t$window.location.reload();\r\n\t\t\t\t}, function(err){\t\r\n\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_this.showAccountModal = function(title, account){\r\n\t\t\t$uibModal.open({\r\n\t\t\t\ttemplateUrl: '/account/save/save.account.view.html',\r\n\t\t\t\tcontroller: 'saveAccountCtrl',\r\n\t\t\t\tcontrollerAs: 'SaveAccount',\r\n\t\t\t\tresolve: {\r\n\t\t\t\t\tsaveAccountPageTitle: function(){\r\n\t\t\t\t\t\treturn title;\r\n\t\t\t\t\t},\r\n\t\t\t\t\taccount: function() {\r\n\t\t\t\t\t\treturn account;\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\tsize: 'lg'\r\n\t\t\t});\r\n\r\n\t\t};\r\n  }]);\r\n})();\n(function(){\r\n\tapp.controller(\"paymentCtrl\", ['$scope', '$uibModal', '$log', 'meanData', '$window',\r\n\tfunction($scope, $uibModal, $log, meanData, $window){\r\n\t\tvar _this = this;\r\n\r\n\t\t_this.showAddTransaction = function() {\r\n\t\t\t$uibModal.open({\r\n\t\t\t\ttemplateUrl: '/payment/save/transaction/transaction.view.html',\r\n\t\t\t\tcontroller: 'transactionCtrl',\r\n\t\t\t\tcontrollerAs: 'Transaction',\r\n\t\t\t\tsize: 'lg'\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t_this.showAddRecurring = function() {\r\n\t\t\t$uibModal.open({\r\n\t\t\t\ttemplateUrl: '/payment/save/recurring-payment/recurring-payment.view.html',\r\n\t\t\t\tcontroller: 'recurringPaymentCtrl',\r\n\t\t\t\tcontrollerAs: 'RecurringPayment',\r\n\t\t\t\tsize: 'lg'\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t_this.removeTransaction = function(id) {\r\n\t\t\tmeanData.deleteTransaction(id).then(function(res){\r\n\t\t\t\talert(res.data.msg);\r\n\t\t\t\t$window.location.reload();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t_this.removeRecurring = function(id) {\r\n\t\t\tmeanData.deleteRecurringPayment(id).then(function(res){\r\n\t\t\t\talert(res.data.msg);\r\n\t\t\t\t$window.location.reload();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t_this.salaryNeedForPlan = function(plan) {\r\n\t\t\tmeanData.salaryNeedForPlan(plan).then(function(res){\r\n\t\t\t\tplan.result = res.data.data;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tmeanData.getRecurringPayments().then(function(res){\r\n\t\t\t_this.recurringPayments = res.data.data;\r\n\t\t});\r\n\r\n\t\tmeanData.getTransactions().then(function(res){\r\n\t\t\t_this.transactioins = res.data.data;\r\n\t\t});\r\n\r\n\t\tmeanData.getAccountsNotCreditCard().then(function(res){\r\n\t\t\t_this.nonCreditCardAccounts = res.data.data;\r\n\t\t});\r\n\t}]);\r\n})();\n(function(){\r\n  app.controller(\"homeCtrl\", ['$scope', function($scope){\r\n\r\n  }]);\r\n})();\n(function(){\r\n\tapp.controller('predictionCtrl', ['$scope', 'utilService', 'mockService', '$q', '$uibModal', 'meanData',\r\n\t\tfunction($scope, utilService, mockService, $q, $uibModal, meanData){\r\n\t\tvar _this = this;\r\n\t\t// initial controller level val here...\r\n\t\t_this.showStatements = false;\r\n\t\t_this.events;\r\n\t\t_this.currentFinanceSafe = true;\r\n\t\t_this.statements;\r\n\t\t_this.calendarDisplayerOptions = {};  // Calendar Settings\r\n\t\t// ngModel can't handle moment object, so still using Date object here...\r\n\t\t_this.selectedDate = new Date();\r\n\t\t_this.endDate = new Date(new Date().getFullYear(), new Date().getMonth() + 1, new Date().getDate());\r\n\r\n\t\tvar getDayClass = function(data) {\r\n\t\t\tvar date = data.date;\r\n\t\t\tvar mode = data.mode;\r\n\t\t\tif(mode === 'day') {\r\n\t\t\t\tvar dayToCheck = new Date(date).setHours(0,0,0,0);\r\n\t\t\t\tfor(var i = 0; i < _this.events.length; i++){\r\n\t\t\t\t\tvar eventDay = new Date(_this.events[i].date).setHours(0,0,0,0);\r\n\t\t\t\t\tif(dayToCheck === eventDay) {\r\n\t\t\t\t\t\treturn _this.events[i].financeStatus;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn '';\r\n\t\t}\r\n\r\n\t\tvar showSelectedDateModal = function(statement) {\r\n\t\t\t$uibModal.open({\r\n\t\t\t\ttemplateUrl: '/prediction/statement.modal.html',\r\n\t\t\t\tcontroller: function(){\r\n\t\t\t\t\tvar _this = this;\r\n\t\t\t\t\t_this.statement = statement;\r\n\t\t\t\t},\r\n\t\t\t\tcontrollerAs: \"showSelectedDateModalCtrl\",\r\n\t\t\t\tsize: 'lg'\r\n\t\t\t}).result.then(function () {\r\n\t\t\t\t\r\n\t\t\t}, function () {\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t_this.calculatePending = function(account) {\r\n\t\t\taccount.pending = 0;\r\n\t\t\taccount.pendingTransactions.forEach(function(pt){\r\n\t\t\t\taccount.pending += pt.amount;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t_this.doPredict = function(startDate, endDate) {\r\n\t\t\tif(typeof startDate === 'undefined' || startDate === null || startDate == '')\r\n\t\t\t\tstartDate = moment();\r\n\t\t\tif(typeof endDate === 'undefined' || endDate === null || endDate == '')\r\n\t\t\t\tendDate = moment();\r\n\t\t\t\r\n\t\t\tstartDate = utilService.dateFormat(startDate, 1);\r\n\t\t\tendDate = utilService.dateFormat(endDate, 1);\r\n\r\n\t\t\tmeanData.doFinancialPrediction(startDate, endDate).then(function(res){\r\n\t\t\t\t_this.events = res.data.events;\r\n\t\t\t\t_this.currentFinanceSafe = res.data.currentFinanceSafe;\r\n\t\t\t\t_this.statements = res.data.statements;\r\n\t\t\t\t_this.lowestBalanceInAccountList = res.data.lowestBalanceInAccountList;\r\n\r\n\t\t\t\t_this.calendarDisplayerOptions = {\r\n\t\t\t\t\tcustomClass: getDayClass,\r\n\t\t\t\t\tminDate: new Date(startDate),\r\n\t\t\t\t\tmaxDate: new Date(endDate)\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t_this.dateSelected = function(date) {\r\n\t\t\tfor(var i = 0; i < _this.statements.length; i++) {\r\n\t\t\t\tif(_this.statements[i].date === utilService.dateFormat(date, 0)) {\r\n\t\t\t\t\tshowSelectedDateModal(_this.statements[i]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t/*\r\n\t\t// TODO: It may cause infinite changes.... After changes, the index may change...\r\n\r\n\t\t$scope.deleteTransaction = function(parentIndex, index, startDate, endDate) {\r\n\t\t\tgetAccountsAndPaymentsData().then(function(res){\r\n\t\t\t\tres[1].splice(index, 1);\r\n\t\t\t\tdoPredict(startDate, endDate, res[0], res[1], res[2]);\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t$scope.addTransactions = function(startDate, endDate) {\r\n\t\t\tvar transactions = mockService.getMockTransactions;\r\n\r\n\t\t\tgetAccountsAndPaymentsData().then(function(res){\r\n\t\t\t\ttransactions.forEach(function(transaction){\r\n\t\t\t\t\tres[1].push(transaction);\r\n\t\t\t\t});\r\n\t\t\t\tdoPredict(startDate, endDate, res[0], res[1], res[2], res[3]);\r\n\t\t\t});\r\n\t\t}*/\r\n\r\n\t\t_this.doPredict(undefined, _this.endDate);\r\n\t}]);\r\n})();\n(function(){\r\n  app.controller('settingsCtrl', ['$scope', 'meanData', '$window', 'utilService',\r\n    function($scope, meanData, $window, utilService){\r\n    var _this = this;\r\n    _this.settings;\r\n    _this.canTransaction;\r\n    _this.backupDBVersion;\r\n    \r\n    meanData.getSettings().then(function(res){\r\n      _this.settings = res.data.data[0];\r\n      _this.settings.accountConfirmDate = new Date(res.data.data[0].accountConfirmDate);\r\n    });\r\n\r\n    _this.updateSettings = function() {\r\n      meanData.updateSettings(_this.settings).then(function(res){\r\n        alert(res.data.msg);\r\n        $window.location.reload();\r\n      });\r\n    }\r\n\r\n    _this.canHasTransaction = function(transaction){\r\n      utilService.loading = true;\r\n      meanData.canHasTransaction(transaction).then(function(res){\r\n        if(res.data.length == 0) {\r\n          alert(\"You can't has this transaction\");\r\n        } else {\r\n          _this.avaliableAccounts = res.data;\r\n        }\r\n        utilService.loading = false;\r\n      });\r\n    }\r\n\r\n    _this.comsumptionCapacityByDate = function(date) {\r\n      utilService.loading = true;\r\n      date = moment().add(1, 'day');\r\n      meanData.comsumptionCapacityByDate(date).then(function(res){\r\n        _this.settings.comsumptionCapacity = res.data.balance;\r\n        utilService.loading = false;\r\n      });\r\n    }\r\n\r\n    _this.backupDB = function() {\r\n      utilService.loading = true;\r\n      if(_this.settings._id) {\r\n        meanData.backUpDB(_this.settings._id).then(function(res){\r\n          alert(res.data.msg);\r\n          utilService.loading = false;\r\n          $window.location.reload();\r\n        });\r\n      }\r\n    }\r\n\r\n    _this.restoreDB = function() {\r\n      utilService.loading = true;\r\n      if(_this.settings._id) {\r\n        meanData.restoreDB(_this.settings._id).then(function(res){\r\n          utilService.loading = false;\r\n          alert(res.data.msg);\r\n          $window.location.reload();\r\n        });\r\n      }\r\n    }\r\n  }]);\r\n})();\n(function(){\r\n    app.controller(\"saveAccountCtrl\", ['$scope', 'saveAccountPageTitle', 'account', '$uibModalInstance', 'meanData', '$window',\r\n        function($scope, saveAccountPageTitle, account, $uibModalInstance, meanData, $window){\r\n        // initial data here...\r\n        var _this = this;\r\n        _this.account = account;\r\n        _this.nAccount = {};\r\n        _this.nAccount.pendingTransactions = [];\r\n        _this.saveAccountFlag = {};\r\n        _this.saveAccountPageTitle = saveAccountPageTitle;\r\n        _this.transactionCategoryList = [];\r\n        _this.accountDefault;\r\n        _this.payByAccounts;\r\n\r\n        var setSaveAccountFlag = function(bool) {\r\n            if(typeof bool !== 'boolean')\r\n                return;\r\n            _this.saveAccountFlag = {\r\n                \"accountName\": bool,\r\n                \"last4Num\": bool,\r\n                \"dueDate\": bool,\r\n                \"closingDate\": bool,\r\n                \"minPayment\": bool,\r\n                \"creditLine\": bool,\r\n                \"balance\": bool,\r\n                \"lastBalance\": bool,\r\n                \"threshold\": bool,\r\n                \"resetEdit\": bool,\r\n                \"resetSubmit\": !bool,\r\n                \"submit\": !bool,\r\n                \"edit\": bool,\r\n                \"apr0Valid\": bool,\r\n                \"apr0Date\": bool,\r\n                \"pendingTransactions\": bool,\r\n                \"rewards\": bool,\r\n                \"rewardRules\": bool,\r\n                \"payBy\": bool,\r\n                \"backupPaymentAccount\": bool,\r\n                \"avaliableBalance\": bool\r\n            };\r\n        }\r\n\r\n        var newPendingTransaction = {\r\n            type: \"Debit\",\r\n            category: null,\r\n            description: null,\r\n            date: null,\r\n            amount: 0\r\n        }\r\n\r\n        _this.addPendingTransactionRow = function() {\r\n            _this.nAccount.pendingTransactions.push(angular.copy(newPendingTransaction));\r\n        }\r\n\r\n        _this.deletePendingTransactionRow = function(index) {\r\n            _this.nAccount.pendingTransactions.splice(index, 1);\r\n        }\r\n\r\n        _this.updateAccount = function(account) {\r\n            meanData.updateAccount(account).then(function(res){\r\n                alert(res.data.msg);\r\n                $window.location.reload();\r\n            }, function(err){\r\n                console.error(err);\r\n            });\r\n        }\r\n\r\n        _this.addAccount = function(account) {\r\n            meanData.addAccount(account).then(function(res){\r\n                alert(res.data.msg);\r\n                $window.location.reload();\r\n            },function(err){\r\n                console.error(err.data.message);\r\n                console.error(err.data);\r\n            });\r\n            _this.cancelModal();\r\n        }\r\n\r\n        _this.cancelModal = function() {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        _this.resetEdit = function(editAccount, origin) {\r\n            Object.keys(editAccount).forEach(function(prop){\r\n                editAccount[prop] = origin[prop];\r\n            });\r\n        }\r\n\r\n        _this.selectedAccountDefault = function() {\r\n            _this.accountDefault.forEach(function(ad){\r\n                if(ad.accountName === _this.nAccount.accountName) {\r\n                    _this.nAccount.type = ad.type;\r\n                    _this.nAccount.rewardRules = [];\r\n                    ad.rewardRules.forEach(function(adRewardRule){\r\n                        _this.nAccount.rewardRules.push({\r\n                            rule: adRewardRule,\r\n                            earned: 0,\r\n                            startDate: new Date(adRewardRule.startDate),\r\n                            endDate: new Date(adRewardRule.endDate)\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        _this.deleteAccount = function(account) {\r\n            meanData.deleteAccountDefault(account._id).then(function(res){\r\n                // after delete\r\n            });\r\n        }\r\n\r\n        // edit or check account details\r\n        if(account) {\r\n            setSaveAccountFlag(true);\r\n            // date format\r\n            _this.account = angular.copy(account);\r\n            _this.nAccount = angular.copy(account);\r\n        } else {\r\n            // add new account\r\n            setSaveAccountFlag(false);\r\n        }\r\n\r\n        meanData.getAccountDefault().then(function(ad){\r\n            _this.accountDefault = ad.data.data;\r\n        });\r\n        meanData.getAccountsNotCreditCard().then(function(ancc){\r\n            _this.payByAccounts = ancc.data.data;\r\n        });\r\n        \r\n        meanData.getAccounts().then(function(accounts){\r\n            _this.accounts = accounts.data.data.accountsDetails;\r\n        });\r\n        meanData.getSettings('transactionCategory').then(function(tc){\r\n            _this.transactionCategoryList = tc.data.data[0].transactionCategory;\r\n        });\r\n    }]);\r\n})();\n(function () {\r\n  app.service('meanData', ['$http',\r\n      function meanData($http) {\r\n    \r\n    var _this = this;\r\n    \r\n    _this.financialServerUrl = '/rest/finance';\r\n\r\n    var doFinancialPrediction = function(startDate, endDate) {\r\n      return $http.get(_this.financialServerUrl + '/budget?sd=' + startDate + '&ed=' + endDate);\r\n    }\r\n    \r\n    var comsumptionCapacityByDate = function(date) {\r\n      return $http.get(_this.financialServerUrl + '/budget/coms-cap?date=' + date);\r\n    }\r\n\r\n    var canHasTransaction = function(transactions) {\r\n      return $http.put(_this.financialServerUrl + '/budget/trans-perm', transactions);\r\n    }\r\n\r\n    var salaryNeedForPlan = function(plan) {\r\n      return $http.put(_this.financialServerUrl + '/budget/salary-need', plan);\r\n    }\r\n\r\n    /* Recurring Payment */\r\n    var getRecurringPayments = function() {\r\n      return $http.get(_this.financialServerUrl + '/recurring');\r\n    }\r\n\r\n    var addRecurringPayment = function(recurring) {\r\n      return $http.post(_this.financialServerUrl + '/recurring', recurring);\r\n    }\r\n\r\n    var updateRecurringPayment = function(recurring) {\r\n      return $http.put(_this.financialServerUrl + '/recurring', recurring);\r\n    }\r\n\r\n    var deleteRecurringPayment = function(id) {\r\n      return $http.delete(_this.financialServerUrl + '/recurring/' + id);\r\n    }\r\n\r\n    /* Transaction */\r\n    var getTransactions = function(isPending) {\r\n      return $http.get(_this.financialServerUrl + '/transaction?isPending' + isPending);\r\n    }\r\n\r\n    var addTransaction = function(transaction) {\r\n      return $http.post(_this.financialServerUrl + '/transaction', transaction);\r\n    }\r\n\r\n    var updateTransaction = function(transaction) {\r\n      return $http.put(_this.financialServerUrl + '/transaction', transaction);\r\n    }\r\n\r\n    var deleteTransaction = function(id) {\r\n      return $http.delete(_this.financialServerUrl + '/transaction/' + id);\r\n    }\r\n\r\n    /* Account */\r\n    var getAccounts = function() {\r\n      return $http.get(_this.financialServerUrl + '/account');\r\n    }\r\n\r\n    var addAccount = function(account) {\r\n      return $http.post(_this.financialServerUrl + '/account', account);\r\n    }\r\n\r\n    var updateAccount = function(account) {\r\n      return $http.put(_this.financialServerUrl + '/account', account);\r\n    }\r\n\r\n    var deleteAccount = function(id) {\r\n      return $http.delete(_this.financialServerUrl + '/account/' + id);\r\n    }\r\n\r\n    var getAccountsNotCreditCard = function() {\r\n      return $http.get(_this.financialServerUrl + '/account/not-cc');\r\n    }\r\n\r\n    /* Account Default */\r\n    var getAccountDefault = function() {\r\n      return $http.get(_this.financialServerUrl + '/account-default');\r\n    }\r\n\r\n    var addAccountDefault = function(accountDefault) {\r\n      return $http.post(_this.financialServerUrl + '/account-default', accountDefault);\r\n    }\r\n\r\n    var deleteAccountDefault = function(id) {\r\n      return $http.delete(_this.financialServerUrl + '/account-default/' + id);\r\n    }\r\n\r\n    /* Reward Rule */\r\n    var getRewardRules = function() {\r\n      return $http.get(_this.financialServerUrl + '/reward-rule');\r\n    }\r\n\r\n    var addRewardRule = function(rewardRule) {\r\n      return $http.post(_this.financialServerUrl + '/reward-rule', rewardRule);\r\n    }\r\n\r\n    var updateRewardRule = function(rewardRule) {\r\n      return $http.put(_this.financialServerUrl + '/reward-rule', rewardRule);\r\n    }\r\n\r\n    var deleteRewardRule = function(id) {\r\n      return $http.delete(_this.financialServerUrl + '/reward-rule/', id);\r\n    }\r\n\r\n    /* Setting */\r\n    var getSettings = function(need) {\r\n      return $http.get(_this.financialServerUrl + '/settings?need=' + need);\r\n    }\r\n\r\n    var updateSettings = function(settings) {\r\n      return $http.put(_this.financialServerUrl + '/settings', settings);\r\n    }\r\n\r\n    var backUpDB = function(id) {\r\n      return $http.put(_this.financialServerUrl + '/settings/db-backup?id=' + id);\r\n    }\r\n\r\n    var restoreDB = function(id) {\r\n      return $http.put(_this.financialServerUrl + '/settings/db-restore?id=' + id);\r\n    }\r\n\r\n    return {\r\n      doFinancialPrediction: doFinancialPrediction,\r\n      getRecurringPayments: getRecurringPayments,\r\n      addRecurringPayment: addRecurringPayment,\r\n      deleteRecurringPayment: deleteRecurringPayment,\r\n      getTransactions: getTransactions,\r\n      addTransaction: addTransaction,\r\n      updateTransaction: updateTransaction,\r\n      deleteTransaction: deleteTransaction,\r\n      getAccountDefault: getAccountDefault,\r\n      addAccountDefault: addAccountDefault,\r\n      deleteAccountDefault: deleteAccountDefault,\r\n      getAccounts: getAccounts,\r\n      addAccount: addAccount,\r\n      updateAccount: updateAccount,\r\n      deleteAccount: deleteAccount,\r\n      getRewardRules: getRewardRules,\r\n      addRewardRule: addRewardRule,\r\n      updateRewardRule: updateRewardRule,\r\n      deleteRewardRule: deleteRewardRule,\r\n      getAccountsNotCreditCard: getAccountsNotCreditCard,\r\n      getSettings: getSettings,\r\n      updateSettings: updateSettings,\r\n      canHasTransaction: canHasTransaction,\r\n      comsumptionCapacityByDate: comsumptionCapacityByDate,\r\n      salaryNeedForPlan: salaryNeedForPlan,\r\n      backUpDB: backUpDB,\r\n      restoreDB: restoreDB\r\n    }\r\n  }])\r\n})();\n(function(){\r\n  app.service('mockService', ['utilService', function(utilService){\r\n    var getMockTransactions = [\r\n      {\r\n        type: \"Debit\",\r\n        description: \"Mock Tran 1\",\r\n        date: \"2/19/2017\",\r\n        amount: 1200,\r\n        accountName: \"Citi Double Cash\"\r\n      },\r\n      {\r\n        type: \"Credit\",\r\n        description: \"Mock Tran 2\",\r\n        date: \"3/3/2017\",\r\n        amount: 55,\r\n        accountName: \"Citi Check\"\r\n      },\r\n      {\r\n        type: \"Debit\",\r\n        description: \"Mock Tran 3\",\r\n        date: \"3/4/2017\",\r\n        amount: 7777,\r\n        accountName: \"Chase Amazon Prime\"\r\n      },\r\n    ]\r\n\r\n    return {\r\n      getMockTransactions: getMockTransactions\r\n    }\r\n  }]);\r\n})();\n(function(){\r\n  app.service('utilService', [function(){\r\n\t\tvar loading = false;\r\n    // flag -1: return moment object\r\n\t\t// flag 0: return string; add weekday, 2/17/2017 Tuesday\r\n\t\t// flag 1: return string; month day year, 2/2/2017\r\n\t\tvar dateFormat = function(date, flag){\r\n\t\t\tif(flag === -1) \r\n\t\t\t\treturn moment(new Date(date));\r\n\r\n\t\t\tif (date instanceof Date) {\r\n\t\t\t\tif(typeof flag === 'undefined')\r\n\t\t\t\t\treturn moment(date).format('MM/DD/YYYY');\r\n\t\t\t\tif (flag === 0)\r\n\t\t\t\t\treturn moment(date).format('MM/DD/YYYY, dddd');\r\n\t\t\t\tif (flag === 1)\r\n\t\t\t\t\treturn moment(date).format('MM/DD/YYYY');\r\n\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\tif (date instanceof moment) {\r\n\t\t\t\tif(typeof flag === 'undefined')\r\n\t\t\t\t\treturn date.format('MM/DD/YYYY');\r\n\t\t\t\tif (flag === 0)\r\n\t\t\t\t\treturn date.format('MM/DD/YYYY, dddd');\r\n\t\t\t\tif (flag === 1)\r\n\t\t\t\t\treturn date.format('MM/DD/YYYY');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn console.log(\"Can't regonize...\");\r\n\t\t}\r\n\t\t\r\n\t\tvar accountType = function(type) {\r\n\t\t\tif (type === 'cc')\r\n\t\t\t\treturn 'CreditCard';\r\n\t\t\tif(type === 'cash')\r\n\t\t\t\treturn 'Cash';\r\n\t\t\tif(type === 'checking')\r\n\t\t\t\treturn 'Checking';\r\n\t\t\tif(type === 'saving')\r\n\t\t\t\treturn 'Saving';\r\n\t\t}\r\n\r\n\t\tvar transactionType = function(type) {\r\n\t\t\tif(type === 'debit')\r\n\t\t\t\treturn 'Debit';\r\n\t\t\tif(type === 'credit')\r\n\t\t\t\treturn 'Credit';\r\n\t\t}\r\n\r\n    return {\r\n      dateFormat: dateFormat,\r\n\t\t\taccountType: accountType,\r\n\t\t\ttransactionType: transactionType,\r\n\t\t\tloading: loading\r\n    }\r\n  }]);\r\n})();\n(function(){\r\n    app.controller(\"recurringPaymentCtrl\", ['$scope', '$uibModalInstance', 'meanData', '$window',\r\n        function($scope, $uibModalInstance, meanData, $window){\r\n        \r\n        var _this = this;\r\n        _this.newRecurringPayment = {};\r\n        _this.transactionCategoryList;\r\n        _this.accounts;\r\n\r\n        meanData.getSettings('transactionCategory').then(function(res){\r\n            _this.transactionCategoryList = res.data.data[0].transactionCategory;\r\n        });\r\n\r\n        meanData.getAccounts().then(function(res){\r\n            _this.accounts = res.data.data.accountsDetails;\r\n        });\r\n\r\n        _this.submit = function() {\r\n            meanData.addRecurringPayment(_this.newRecurringPayment).then(function(res){\r\n                alert(res.data.msg);\r\n                $window.location.reload();\r\n            }, function(err){\r\n                console.error(err);\r\n            });\r\n        }\r\n\r\n        _this.cancelModal = function() {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n    }]);\r\n})();\n(function(){\r\n    app.controller(\"transactionCtrl\", ['$scope', '$uibModalInstance', 'meanData', '$window',\r\n        function($scope, $uibModalInstance, meanData, $window){\r\n\r\n        var _this = this;\r\n        _this.transactionCategoryList;\r\n        _this.accounts;\r\n        _this.newTransaction = {};\r\n\r\n        meanData.getSettings('transactionCategory').then(function(res){\r\n            _this.transactionCategoryList = res.data.data[0].transactionCategory;\r\n        });\r\n\r\n        meanData.getAccounts().then(function(res){\r\n            _this.accounts = res.data.data.accountsDetails;\r\n        });\r\n\r\n        _this.submit = function() {\r\n            meanData.addTransaction(_this.newTransaction).then(function(res){\r\n                alert(res.data.msg);\r\n                $window.location.reload();\r\n            }, function(err){\r\n                console.error(err);\r\n            });\r\n        }\r\n\r\n        _this.cancelModal = function() {\r\n            $uibModalInstance.dismiss('cancel');\r\n        }\r\n    }]);\r\n})();\n(function () {\r\n  app.directive('navigation', function () {\r\n    return {\r\n      restrict: 'EA',\r\n      templateUrl: '/common/directives/navigation/navigation.view.html'\r\n    }\r\n  });\r\n\r\n  app.controller('navCtrl', ['$scope', '$location', '$window', '$rootScope',\r\n  function($scope, $location, $window, $rootScope){\r\n\t\r\n    $rootScope.isActive = function(viewLocation){\r\n      if(viewLocation === '/')\r\n        return $location.path() === viewLocation;\r\n        for(var i = 0; i < $location.path().split('/').length; i++) {\r\n          if($location.path().split('/')[i] === viewLocation)\r\n            return true;\r\n        }\r\n      return false;\r\n    };\r\n  }])\r\n})();\n(function(){\r\n    app.component('inputAmount', {\r\n        templateUrl: \"/common/components/input/amount/amount.view.html\",\r\n        controller: function testController(){\r\n\r\n        },\r\n        bindings: {\r\n            readonly: '=',\r\n            data: '='\r\n        }\r\n    });\r\n})();"]}